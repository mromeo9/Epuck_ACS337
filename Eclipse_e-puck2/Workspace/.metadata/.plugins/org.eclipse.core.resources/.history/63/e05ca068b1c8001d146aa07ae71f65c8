#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "ch.h"
#include "hal.h"
#include "memory_protection.h"
#include <main.h>
#include "leds.h"
#include "spi_comm.h"
#include "motors.h"
#include "selector.h"
#include "epuck1x/uart/e_uart_char.h"
#include "stdio.h"
#include "serial_comm.h"
#include "chprintf.h"
#include "usbcfg.h"
#include "sensors/proximity.h"
#include "sensors/VL53L0X/VL53L0X.h"

/*Defining the bus process*/
messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);

/*Functions Initialisations*/
void clear_leds(void);
void spi_comm_start(void);
void set_led(led_name_t led_number, unsigned int value);
void ret_prox(int *prox);
void motor_control(int *prox, int sensor);

/*Main function*/
int main(void)
{

/*Pre function initialisations*/
    halInit();
    chSysInit();
    mpu_init();
    motors_init();
    messagebus_init(&bus,&bus_lock, &bus_condvar);
    serial_start();
    proximity_start(0);
    calibrate_ir();
    clear_leds();
    spi_comm_start();
    VL53L0X_start();

/*Variable initialisation*/
    int proxs[8];
    int rT = 0; /*turn count*/
    int state; /*State*/
    int *p_rT; /*pointer to rT*/
    p_rT = &rT;
    char str[100];
    int str_length;
    int distance;

/*Bus initialisation*/


    /*Infinite loop*/
    while (1) {

        /*Retrieve the proximity information*/
        ret_prox(proxs);

        motor_control(state, p_rT, proxs);


    }
}

void ret_prox(int *prox){
    /*
    Fuction that returns the readings to each proximity sensor
    INPUT - Pointer to an array
    OUTPUT - None
    */
	int obj = 0;
	int prob;
    for(int i =0; i<8; i++){
        prox[i] = get_calibrated_prox(i);
        If(prox[i] >= 1000){
            obj = 1;
            prob = i;

        }

        if(obj == 1){
        	motor_control(proxs, i);
        }
    }
}

void motor_control(int *proxs, int sensor){
    /*
    Fuction to control the motors of the
    INPUT
    State - state the robot is in
    rT - Indicating what direction to turn
    OUTPUT - None
    */
	int speed = 800;
	left_motor_set_speed(0);
	right_motor_set_speed(0);

	int dir;
	int uTurn = 0;

	if(prox[5] <= 800 && prox[2] <= 800){
		/*Random*/
	}
	else if(prox[5] <= 800 && prox[2] >= 800){
		dir = -1;

	}
	else if(prox[5] >= 800 && prox[2] <= 800){
		dir = 1;

	}
	else if(prox[5] >= 800 && prox[2] >= 800){
		dir = 1;
		uTurn = 1;
	}

	while(1){
		left_motor_set_speed(-dir*speed);
		right_motor_set_speed(dir*speed);

		if(dir == -1 && prox[5]>=800 && prox[0]<=50 && prox[7] <=50){

		}
		else if(dir = 1 && prox[2]>=800 && prox[0]<=50 && prox[7] <=50){

		}
	}


}


void emg_adj(){

    /*stop and turn the robot until the sensor no longer is in danger*/

    /*Move until the back sensor(checking any other sensor to make sure they are all still safe) is reading then readjust the angle */

    /*check all sensors are safe then proceed forward*/
}


#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}

