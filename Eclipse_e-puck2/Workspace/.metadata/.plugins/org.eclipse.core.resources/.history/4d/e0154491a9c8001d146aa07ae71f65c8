#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "ch.h"
#include "hal.h"
#include "memory_protection.h"
#include <main.h>
#include "leds.h"
#include "spi_comm.h"
#include "motors.h"
#include "selector.h"
#include "epuck1x/uart/e_uart_char.h"
#include "stdio.h"
#include "serial_comm.h"
#include "chprintf.h"
#include "usbcfg.h"
#include "sensors/proximity.h"
#include "sensors/VL53L0X/VL53L0X.h"

/*Defining the bus process*/
messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);

/*Functions Initialisations*/
void clear_leds(void);
void spi_comm_start(void);
void set_led(led_name_t led_number, unsigned int value);
void ret_prox(int *prox);
void motor_control(int state, int *p_rT);
void turn(int speed, int dir, float t, bool obj);
void emg_adj(int sensor);

/*Main function*/
int main(void)
{

/*Pre function initialisations*/
    halInit();
    chSysInit();
    mpu_init();
    motors_init();
    messagebus_init(&bus,&bus_lock, &bus_condvar);
    serial_start();
    proximity_start(0);
    calibrate_ir();
    clear_leds();
    spi_comm_start();
    VL53L0X_start();

/*Variable initialisation*/
    int proxs[8];
    int rT = 0; /*turn count*/
    int state; /*State*/
    int *p_rT; /*pointer to rT*/
    p_rT = &rT;
    char str[100];
    int str_length;
    int value;

/*Bus initialisation*/


    /*Infinite loop*/
    while (1) {


		value = VL53L0X_get_dist_mm();
		str_length = sprintf(str, "Proximity of sensor is %d!\n",value);
		e_send_uart1_char(str, str_length);

        /*Retrieve the proximity information
        ret_prox(proxs);

        /*If statement to control state
        if(){/*State 0 - Obsticle in front
            state = 0;
        }
        else if(){/*State 1-Obsticle in front and to right
            state = 1;
        }
        else if(){/*State 2-Obsticle in front and to left
            state = 2;
        }
        else{/*State 3 - Constant motion
            state = 3;
        }

        motor_control(state, p_rT);*/


    }
}


#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}

